type AddedDaiToVoting @entity {
  id: ID!
  currentEpoch: BigInt! @index
  voter: String!
  stakingPositionId: BigInt! @index
  votingPositionId: BigInt! @index
  amount: BigInt!
  votes: BigInt!
  timestamp: DateTime! @index
  transactionHash: String!
}

type AddedZooToVoting @entity {
  id: ID!
  currentEpoch: BigInt! @index
  voter: String!
  stakingPositionId: BigInt! @index
  votingPositionId: BigInt! @index
  amount: BigInt!
  votes: BigInt!
  timestamp: DateTime! @index
  transactionHash: String!
}

type ChosenWinner @entity {
  id: ID!
  currentEpoch: BigInt!
  fighter1: BigInt! @index
  fighter2: BigInt! @index
  winner: Boolean! # bool
  pairIndex: BigInt!
  playedPairsAmount: BigInt!
  timestamp: DateTime! @index
  transactionHash: String!
}

type Project @entity {
  id: ID!
  address: String!
  name: String! @index
  symbol: String! @index
  positionsStaked: [CreatedStakerPosition!] @derivedFrom(field: "project")
  positionsVoted: [CreatedVotingPosition!] @derivedFrom(field: "project")
  battleFighters1: [PairedNft!] @derivedFrom(field: "project1")
  battleFighters2: [PairedNft!] @derivedFrom(field: "project2")
}

type CreatedStakerPosition @entity {
  id: ID!
  currentEpoch: BigInt! @index
  staker: String! @index
  stakingPositionId: BigInt!
  isDeleted: Boolean!
  timestamp: DateTime! @index
  project: Project!
  transactionHash: String!
  author: String! @index
  league: Int!
  votingPositions: [CreatedVotingPosition!] @derivedFrom(field: "stakedPosition")
  fighters1: [PairedNft!] @derivedFrom(field: "fighterPosition1")
  fighters2: [PairedNft!] @derivedFrom(field: "fighterPosition2")
}

type CreatedVotingPosition @entity {
  id: ID!
  currentEpoch: BigInt!
  voter: String! @index
  stakingPositionId: BigInt!
  daiAmount: BigInt!
  votes: BigInt!
  votingPositionId: BigInt!
  isDeleted: Boolean!
  timestamp: DateTime! @index
  transactionHash: String!
  project: Project!
  author: String! @index
  stakedPosition: CreatedStakerPosition!
}

type LiquidatedVotingPosition @entity {
  id: ID!
  currentEpoch: BigInt!
  voter: String! @index
  stakingPositionId: BigInt! @index
  beneficiary: String! @index
  votingPositionId: BigInt! @index
  zooReturned: BigInt!
  daiReceived: BigInt!
  timestamp: DateTime! @index
  transactionHash: String!
}

type PairedNft @entity {
  id: ID!
  currentEpoch: BigInt! @index
  fighter1: BigInt! @index
  project1: Project!
  fighter2: BigInt! @index
  project2: Project!
  pairIndex: BigInt!
  timestamp: DateTime! @index
  transactionHash: String!
  league: Int!
  
  fighterPosition1: CreatedStakerPosition!
  fighterPosition2: CreatedStakerPosition!
}

type RemovedStakerPosition @entity {
  id: ID!
  currentEpoch: BigInt!
  staker: String!
  stakingPositionId: BigInt!
  timestamp: DateTime! @index
  transactionHash: String!
}

type WithdrawedDaiFromVoting @entity {
  id: ID!
  currentEpoch: BigInt!
  voter: String!
  stakingPositionId: BigInt!
  votingPositionId: BigInt!
  daiNumber: BigInt!
  beneficiary: String
  timestamp: DateTime! @index
  transactionHash: String!
}

type WithdrawedZooFromVoting @entity {
  id: ID!
  currentEpoch: BigInt!
  voter: String!
  stakingPositionId: BigInt!
  votingPositionId: BigInt!
  zooNumber: BigInt!
  beneficiary: String
  timestamp: DateTime! @index
  transactionHash: String!
}

type ZooUnlocked @entity {
  id: ID!
  voter: String! @index
  positionId: BigInt!
  collection: String! @index
  amount: BigInt!
  timestamp: DateTime! @index
  transactionHash: String!
}

type VotedForCollection @entity {
  id: ID!
  collection: String! @index
  voter: String! @index
  amount: BigInt!
  positionId: BigInt!
  isDeleted: Boolean!
  timestamp: DateTime! @index
  transactionHash: String!
  author: String! @index
}

type FaucetZooGiven @entity {
  id: ID!
  user: String! @index
  timestamp: DateTime! @index
  transactionHash: String!
}

type Stats @entity {
  id: ID!
  value: BigInt!
  updatedAt: DateTime! @index
}

type TransferErc721 @entity {
  id: ID!
  contract: String! @index
  tokenId: BigInt! @index
  from: String!
  to: String!
  timestamp: DateTime! @index
  transactionHash: String!
}

type TransferErc20 @entity {
  id: ID!
  contract: String! @index
  from: String! @index
  to: String! @index
  amount: BigInt!
  timestamp: DateTime! @index
  transactionHash: String!
}

type ClaimedRewardFromStaking @entity {
  id: ID!
  currentEpoch: BigInt!
  staker: String!
  stakingPositionId: BigInt! @index
  beneficiary: String! @index
  yTokenReward: BigInt!
  daiReward: BigInt!
  timestamp: DateTime! @index
  transactionHash: String!
}

type ClaimedRewardFromVoting @entity {
  id: ID!
  currentEpoch: BigInt! @index
  voter: String!
  stakingPositionId: BigInt! @index
  beneficiary: String! @index
  daiReward: BigInt!
  votingPositionId: BigInt!
  timestamp: DateTime! @index
  transactionHash: String!
}

type ClaimedIncentiveRewardFromVoting @entity {
  id: ID!
  staker: String
  voter: String
  beneficiary: String! @index
  stakingPositionId: BigInt @index
  votingPositionId: BigInt @index
  zooReward: BigInt!
  timestamp: DateTime! @index
  transactionHash: String!
}

type NftScanTokens @entity {
  id: ID!
  contract: String! @index
  tokenId: BigInt @index
  meta: String!
}
